// Code generated by protoc-gen-gogo.
// source: replay.proto
// DO NOT EDIT!

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		replay.proto

	It has these top-level messages:
		Point
		Replay
*/
package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Team int32

const (
	Team_UNASSIGNED        Team = 0
	Team_TERRORIST         Team = 1
	Team_COUNTER_TERRORIST Team = 2
	Team_SPECTATOR         Team = 3
)

var Team_name = map[int32]string{
	0: "UNASSIGNED",
	1: "TERRORIST",
	2: "COUNTER_TERRORIST",
	3: "SPECTATOR",
}
var Team_value = map[string]int32{
	"UNASSIGNED":        0,
	"TERRORIST":         1,
	"COUNTER_TERRORIST": 2,
	"SPECTATOR":         3,
}

func (x Team) String() string {
	return proto.EnumName(Team_name, int32(x))
}
func (Team) EnumDescriptor() ([]byte, []int) { return fileDescriptorReplay, []int{0} }

type Point struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{0} }

func (m *Point) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Replay struct {
	Header    *Replay_Header     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Entities  []*Replay_Entity   `protobuf:"bytes,2,rep,name=entities" json:"entities,omitempty"`
	Snapshots []*Replay_Snapshot `protobuf:"bytes,3,rep,name=snapshots" json:"snapshots,omitempty"`
	Ticks     []*Replay_Tick     `protobuf:"bytes,4,rep,name=ticks" json:"ticks,omitempty"`
}

func (m *Replay) Reset()                    { *m = Replay{} }
func (m *Replay) String() string            { return proto.CompactTextString(m) }
func (*Replay) ProtoMessage()               {}
func (*Replay) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1} }

func (m *Replay) GetHeader() *Replay_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Replay) GetEntities() []*Replay_Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Replay) GetSnapshots() []*Replay_Snapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func (m *Replay) GetTicks() []*Replay_Tick {
	if m != nil {
		return m.Ticks
	}
	return nil
}

type Replay_Header struct {
	Map          string  `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	TickRate     float32 `protobuf:"fixed32,2,opt,name=tickRate,proto3" json:"tickRate,omitempty"`
	SnapshotRate int32   `protobuf:"varint,3,opt,name=snapshotRate,proto3" json:"snapshotRate,omitempty"`
}

func (m *Replay_Header) Reset()                    { *m = Replay_Header{} }
func (m *Replay_Header) String() string            { return proto.CompactTextString(m) }
func (*Replay_Header) ProtoMessage()               {}
func (*Replay_Header) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1, 0} }

func (m *Replay_Header) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *Replay_Header) GetTickRate() float32 {
	if m != nil {
		return m.TickRate
	}
	return 0
}

func (m *Replay_Header) GetSnapshotRate() int32 {
	if m != nil {
		return m.SnapshotRate
	}
	return 0
}

type Replay_Entity struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Team  Team   `protobuf:"varint,3,opt,name=team,proto3,enum=protobuf.Team" json:"team,omitempty"`
	IsNpc bool   `protobuf:"varint,4,opt,name=isNpc,proto3" json:"isNpc,omitempty"`
}

func (m *Replay_Entity) Reset()                    { *m = Replay_Entity{} }
func (m *Replay_Entity) String() string            { return proto.CompactTextString(m) }
func (*Replay_Entity) ProtoMessage()               {}
func (*Replay_Entity) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1, 1} }

func (m *Replay_Entity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Replay_Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Replay_Entity) GetTeam() Team {
	if m != nil {
		return m.Team
	}
	return Team_UNASSIGNED
}

func (m *Replay_Entity) GetIsNpc() bool {
	if m != nil {
		return m.IsNpc
	}
	return false
}

type Replay_Snapshot struct {
	Tick         int32                           `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
	EntityUpdate []*Replay_Snapshot_EntityUpdate `protobuf:"bytes,2,rep,name=entityUpdate" json:"entityUpdate,omitempty"`
}

func (m *Replay_Snapshot) Reset()                    { *m = Replay_Snapshot{} }
func (m *Replay_Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Replay_Snapshot) ProtoMessage()               {}
func (*Replay_Snapshot) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1, 2} }

func (m *Replay_Snapshot) GetTick() int32 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *Replay_Snapshot) GetEntityUpdate() []*Replay_Snapshot_EntityUpdate {
	if m != nil {
		return m.EntityUpdate
	}
	return nil
}

type Replay_Snapshot_EntityUpdate struct {
	EntityId      int32    `protobuf:"varint,1,opt,name=entityId,proto3" json:"entityId,omitempty"`
	Positions     []*Point `protobuf:"bytes,2,rep,name=positions" json:"positions,omitempty"`
	Angle         float32  `protobuf:"fixed32,3,opt,name=angle,proto3" json:"angle,omitempty"`
	Hp            int32    `protobuf:"varint,4,opt,name=hp,proto3" json:"hp,omitempty"`
	Armor         int32    `protobuf:"varint,5,opt,name=armor,proto3" json:"armor,omitempty"`
	FlashDuration float32  `protobuf:"fixed32,6,opt,name=flashDuration,proto3" json:"flashDuration,omitempty"`
}

func (m *Replay_Snapshot_EntityUpdate) Reset()         { *m = Replay_Snapshot_EntityUpdate{} }
func (m *Replay_Snapshot_EntityUpdate) String() string { return proto.CompactTextString(m) }
func (*Replay_Snapshot_EntityUpdate) ProtoMessage()    {}
func (*Replay_Snapshot_EntityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorReplay, []int{1, 2, 0}
}

func (m *Replay_Snapshot_EntityUpdate) GetEntityId() int32 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *Replay_Snapshot_EntityUpdate) GetPositions() []*Point {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *Replay_Snapshot_EntityUpdate) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *Replay_Snapshot_EntityUpdate) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *Replay_Snapshot_EntityUpdate) GetArmor() int32 {
	if m != nil {
		return m.Armor
	}
	return 0
}

func (m *Replay_Snapshot_EntityUpdate) GetFlashDuration() float32 {
	if m != nil {
		return m.FlashDuration
	}
	return 0
}

type Replay_Tick struct {
	Nr           int32                      `protobuf:"varint,1,opt,name=nr,proto3" json:"nr,omitempty"`
	GameEvents   []*Replay_Tick_GameEvent   `protobuf:"bytes,2,rep,name=gameEvents" json:"gameEvents,omitempty"`
	MapEvents    []*Replay_Tick_MapEvent    `protobuf:"bytes,3,rep,name=mapEvents" json:"mapEvents,omitempty"`
	EntityEvents []*Replay_Tick_EntityEvent `protobuf:"bytes,4,rep,name=entityEvents" json:"entityEvents,omitempty"`
}

func (m *Replay_Tick) Reset()                    { *m = Replay_Tick{} }
func (m *Replay_Tick) String() string            { return proto.CompactTextString(m) }
func (*Replay_Tick) ProtoMessage()               {}
func (*Replay_Tick) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1, 3} }

func (m *Replay_Tick) GetNr() int32 {
	if m != nil {
		return m.Nr
	}
	return 0
}

func (m *Replay_Tick) GetGameEvents() []*Replay_Tick_GameEvent {
	if m != nil {
		return m.GameEvents
	}
	return nil
}

func (m *Replay_Tick) GetMapEvents() []*Replay_Tick_MapEvent {
	if m != nil {
		return m.MapEvents
	}
	return nil
}

func (m *Replay_Tick) GetEntityEvents() []*Replay_Tick_EntityEvent {
	if m != nil {
		return m.EntityEvents
	}
	return nil
}

type Replay_Tick_GameEvent struct {
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *Replay_Tick_GameEvent) Reset()         { *m = Replay_Tick_GameEvent{} }
func (m *Replay_Tick_GameEvent) String() string { return proto.CompactTextString(m) }
func (*Replay_Tick_GameEvent) ProtoMessage()    {}
func (*Replay_Tick_GameEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorReplay, []int{1, 3, 0}
}

func (m *Replay_Tick_GameEvent) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Replay_Tick_GameEvent) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Replay_Tick_MapEvent struct {
	Event       string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Location    *Point `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	TriggeredBy int32  `protobuf:"varint,3,opt,name=triggeredBy,proto3" json:"triggeredBy,omitempty"`
}

func (m *Replay_Tick_MapEvent) Reset()                    { *m = Replay_Tick_MapEvent{} }
func (m *Replay_Tick_MapEvent) String() string            { return proto.CompactTextString(m) }
func (*Replay_Tick_MapEvent) ProtoMessage()               {}
func (*Replay_Tick_MapEvent) Descriptor() ([]byte, []int) { return fileDescriptorReplay, []int{1, 3, 1} }

func (m *Replay_Tick_MapEvent) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Replay_Tick_MapEvent) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Replay_Tick_MapEvent) GetTriggeredBy() int32 {
	if m != nil {
		return m.TriggeredBy
	}
	return 0
}

type Replay_Tick_EntityEvent struct {
	Event    string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	EntityId string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
}

func (m *Replay_Tick_EntityEvent) Reset()         { *m = Replay_Tick_EntityEvent{} }
func (m *Replay_Tick_EntityEvent) String() string { return proto.CompactTextString(m) }
func (*Replay_Tick_EntityEvent) ProtoMessage()    {}
func (*Replay_Tick_EntityEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorReplay, []int{1, 3, 2}
}

func (m *Replay_Tick_EntityEvent) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Replay_Tick_EntityEvent) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func init() {
	proto.RegisterType((*Point)(nil), "protobuf.Point")
	proto.RegisterType((*Replay)(nil), "protobuf.Replay")
	proto.RegisterType((*Replay_Header)(nil), "protobuf.Replay.Header")
	proto.RegisterType((*Replay_Entity)(nil), "protobuf.Replay.Entity")
	proto.RegisterType((*Replay_Snapshot)(nil), "protobuf.Replay.Snapshot")
	proto.RegisterType((*Replay_Snapshot_EntityUpdate)(nil), "protobuf.Replay.Snapshot.EntityUpdate")
	proto.RegisterType((*Replay_Tick)(nil), "protobuf.Replay.Tick")
	proto.RegisterType((*Replay_Tick_GameEvent)(nil), "protobuf.Replay.Tick.GameEvent")
	proto.RegisterType((*Replay_Tick_MapEvent)(nil), "protobuf.Replay.Tick.MapEvent")
	proto.RegisterType((*Replay_Tick_EntityEvent)(nil), "protobuf.Replay.Tick.EntityEvent")
	proto.RegisterEnum("protobuf.Team", Team_name, Team_value)
}
func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Replay(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Replay(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	}
	return i, nil
}

func (m *Replay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Snapshots) > 0 {
		for _, msg := range m.Snapshots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ticks) > 0 {
		for _, msg := range m.Ticks {
			dAtA[i] = 0x22
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Replay_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if m.TickRate != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Replay(dAtA, i, uint32(math.Float32bits(float32(m.TickRate))))
	}
	if m.SnapshotRate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.SnapshotRate))
	}
	return i, nil
}

func (m *Replay_Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Team != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Team))
	}
	if m.IsNpc {
		dAtA[i] = 0x20
		i++
		if m.IsNpc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Replay_Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Snapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tick != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Tick))
	}
	if len(m.EntityUpdate) > 0 {
		for _, msg := range m.EntityUpdate {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Replay_Snapshot_EntityUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Snapshot_EntityUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.EntityId))
	}
	if len(m.Positions) > 0 {
		for _, msg := range m.Positions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Angle != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Replay(dAtA, i, uint32(math.Float32bits(float32(m.Angle))))
	}
	if m.Hp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Hp))
	}
	if m.Armor != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Armor))
	}
	if m.FlashDuration != 0 {
		dAtA[i] = 0x35
		i++
		i = encodeFixed32Replay(dAtA, i, uint32(math.Float32bits(float32(m.FlashDuration))))
	}
	return i, nil
}

func (m *Replay_Tick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Tick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Nr))
	}
	if len(m.GameEvents) > 0 {
		for _, msg := range m.GameEvents {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MapEvents) > 0 {
		for _, msg := range m.MapEvents {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EntityEvents) > 0 {
		for _, msg := range m.EntityEvents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintReplay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Replay_Tick_GameEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Tick_GameEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *Replay_Tick_MapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Tick_MapEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if m.Location != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.Location.Size()))
		n2, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TriggeredBy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplay(dAtA, i, uint64(m.TriggeredBy))
	}
	return i, nil
}

func (m *Replay_Tick_EntityEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replay_Tick_EntityEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.EntityId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplay(dAtA, i, uint64(len(m.EntityId)))
		i += copy(dAtA[i:], m.EntityId)
	}
	return i, nil
}

func encodeFixed64Replay(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Replay(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintReplay(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Point) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Replay) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovReplay(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	if len(m.Ticks) > 0 {
		for _, e := range m.Ticks {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	return n
}

func (m *Replay_Header) Size() (n int) {
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	if m.TickRate != 0 {
		n += 5
	}
	if m.SnapshotRate != 0 {
		n += 1 + sovReplay(uint64(m.SnapshotRate))
	}
	return n
}

func (m *Replay_Entity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReplay(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	if m.Team != 0 {
		n += 1 + sovReplay(uint64(m.Team))
	}
	if m.IsNpc {
		n += 2
	}
	return n
}

func (m *Replay_Snapshot) Size() (n int) {
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovReplay(uint64(m.Tick))
	}
	if len(m.EntityUpdate) > 0 {
		for _, e := range m.EntityUpdate {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	return n
}

func (m *Replay_Snapshot_EntityUpdate) Size() (n int) {
	var l int
	_ = l
	if m.EntityId != 0 {
		n += 1 + sovReplay(uint64(m.EntityId))
	}
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	if m.Angle != 0 {
		n += 5
	}
	if m.Hp != 0 {
		n += 1 + sovReplay(uint64(m.Hp))
	}
	if m.Armor != 0 {
		n += 1 + sovReplay(uint64(m.Armor))
	}
	if m.FlashDuration != 0 {
		n += 5
	}
	return n
}

func (m *Replay_Tick) Size() (n int) {
	var l int
	_ = l
	if m.Nr != 0 {
		n += 1 + sovReplay(uint64(m.Nr))
	}
	if len(m.GameEvents) > 0 {
		for _, e := range m.GameEvents {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	if len(m.MapEvents) > 0 {
		for _, e := range m.MapEvents {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	if len(m.EntityEvents) > 0 {
		for _, e := range m.EntityEvents {
			l = e.Size()
			n += 1 + l + sovReplay(uint64(l))
		}
	}
	return n
}

func (m *Replay_Tick_GameEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	return n
}

func (m *Replay_Tick_MapEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovReplay(uint64(l))
	}
	if m.TriggeredBy != 0 {
		n += 1 + sovReplay(uint64(m.TriggeredBy))
	}
	return n
}

func (m *Replay_Tick_EntityEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovReplay(uint64(l))
	}
	return n
}

func sovReplay(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReplay(x uint64) (n int) {
	return sovReplay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Replay_Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &Replay_Entity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &Replay_Snapshot{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticks = append(m.Ticks, &Replay_Tick{})
			if err := m.Ticks[len(m.Ticks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.TickRate = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotRate", wireType)
			}
			m.SnapshotRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (Team(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNpc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNpc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityUpdate = append(m.EntityUpdate, &Replay_Snapshot_EntityUpdate{})
			if err := m.EntityUpdate[len(m.EntityUpdate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Snapshot_EntityUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			m.EntityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, &Point{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Angle = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			m.Armor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Armor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlashDuration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.FlashDuration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Tick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nr", wireType)
			}
			m.Nr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameEvents = append(m.GameEvents, &Replay_Tick_GameEvent{})
			if err := m.GameEvents[len(m.GameEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapEvents = append(m.MapEvents, &Replay_Tick_MapEvent{})
			if err := m.MapEvents[len(m.MapEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityEvents = append(m.EntityEvents, &Replay_Tick_EntityEvent{})
			if err := m.EntityEvents[len(m.EntityEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Tick_GameEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Tick_MapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Point{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredBy", wireType)
			}
			m.TriggeredBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggeredBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replay_Tick_EntityEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReplay
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReplay
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReplay(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReplay = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplay   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("replay.proto", fileDescriptorReplay) }

var fileDescriptorReplay = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x5c,
	0x10, 0xad, 0x9d, 0x38, 0xb2, 0xa7, 0x69, 0xbe, 0x7c, 0x23, 0x2a, 0x8c, 0x17, 0x21, 0x04, 0x84,
	0x2a, 0x2a, 0x82, 0xd4, 0x0a, 0xb1, 0x41, 0xaa, 0xfa, 0x63, 0x95, 0x82, 0x48, 0xab, 0x89, 0xbb,
	0x61, 0x83, 0x6e, 0x93, 0xdb, 0xc4, 0x6a, 0xfc, 0x23, 0xdb, 0x45, 0xcd, 0x33, 0xb0, 0xe1, 0x31,
	0x78, 0x07, 0xd6, 0x48, 0x2c, 0x79, 0x04, 0x54, 0x5e, 0x04, 0xdd, 0x7b, 0xfd, 0x93, 0xa8, 0xe9,
	0xca, 0x77, 0xe6, 0x9e, 0x73, 0xee, 0xcc, 0x99, 0x31, 0x34, 0x13, 0x1e, 0xcf, 0xd8, 0xbc, 0x1f,
	0x27, 0x51, 0x16, 0xa1, 0x29, 0x3f, 0x17, 0xd7, 0x97, 0xbd, 0xa7, 0x60, 0x9c, 0x45, 0x7e, 0x98,
	0x61, 0x13, 0xb4, 0x1b, 0x5b, 0xeb, 0x6a, 0x5b, 0x1a, 0x69, 0x37, 0x22, 0x9a, 0xdb, 0xba, 0x8a,
	0xe6, 0xbd, 0xaf, 0x16, 0x34, 0x48, 0xf2, 0xf1, 0x15, 0x34, 0xa6, 0x9c, 0x8d, 0x79, 0x22, 0xb1,
	0xeb, 0x3b, 0x0f, 0xfb, 0x85, 0x54, 0x5f, 0x21, 0xfa, 0xef, 0xe4, 0x35, 0xe5, 0x30, 0xdc, 0x05,
	0x93, 0x87, 0x99, 0x9f, 0xf9, 0x3c, 0xb5, 0xf5, 0x6e, 0x6d, 0x25, 0xc5, 0x15, 0x80, 0x39, 0x95,
	0x40, 0x7c, 0x03, 0x56, 0x1a, 0xb2, 0x38, 0x9d, 0x46, 0x59, 0x6a, 0xd7, 0x24, 0xeb, 0xd1, 0x1d,
	0xd6, 0x30, 0x47, 0x50, 0x85, 0xc5, 0x6d, 0x30, 0x32, 0x7f, 0x74, 0x95, 0xda, 0x75, 0x49, 0xda,
	0xbc, 0x43, 0xf2, 0xfc, 0xd1, 0x15, 0x29, 0x8c, 0xf3, 0x09, 0x1a, 0xaa, 0x58, 0x6c, 0x43, 0x2d,
	0x60, 0xb1, 0x6c, 0xc9, 0x22, 0x71, 0x44, 0x07, 0x4c, 0x01, 0x22, 0x96, 0x71, 0xe9, 0x83, 0x4e,
	0x65, 0x8c, 0x3d, 0x68, 0x16, 0x2f, 0xca, 0xfb, 0x5a, 0x57, 0xdb, 0x32, 0x68, 0x29, 0xe7, 0x5c,
	0x42, 0x43, 0x75, 0x85, 0x2d, 0xd0, 0xfd, 0xb1, 0x94, 0x36, 0x48, 0xf7, 0xc7, 0x88, 0x50, 0x0f,
	0x59, 0xa0, 0x54, 0x2d, 0x92, 0x67, 0xec, 0x41, 0x3d, 0xe3, 0x2c, 0x90, 0x4a, 0xad, 0x9d, 0x56,
	0x55, 0xb5, 0xc7, 0x59, 0x40, 0xf2, 0x0e, 0x1f, 0x80, 0xe1, 0xa7, 0x83, 0x78, 0x64, 0xd7, 0xbb,
	0xda, 0x96, 0x49, 0x2a, 0x70, 0xbe, 0xeb, 0x60, 0x16, 0x46, 0x08, 0x69, 0x51, 0x64, 0xfe, 0x98,
	0x3c, 0xe3, 0x7b, 0x68, 0x4a, 0x5b, 0xe7, 0xe7, 0xf1, 0x58, 0x35, 0x23, 0x8c, 0x79, 0x7e, 0xaf,
	0x9b, 0xf9, 0x30, 0x14, 0x9a, 0x96, 0xb8, 0xce, 0x0f, 0x0d, 0x9a, 0x8b, 0xd7, 0xc2, 0x25, 0x05,
	0x38, 0x29, 0x3a, 0x2c, 0x63, 0x7c, 0x09, 0x56, 0x1c, 0xa5, 0x7e, 0xe6, 0x47, 0x61, 0x31, 0xf9,
	0xff, 0xaa, 0x57, 0xe5, 0xd2, 0x51, 0x85, 0x10, 0xed, 0xb1, 0x70, 0x32, 0x53, 0x6e, 0xea, 0xa4,
	0x02, 0x61, 0xde, 0x34, 0x96, 0x1d, 0x1b, 0xa4, 0x4f, 0x63, 0x89, 0x4a, 0x82, 0x28, 0xb1, 0x0d,
	0x99, 0x52, 0x01, 0x3e, 0x83, 0x8d, 0xcb, 0x19, 0x4b, 0xa7, 0x47, 0xd7, 0x09, 0x13, 0x6a, 0x76,
	0x43, 0x6a, 0x2c, 0x27, 0x9d, 0x9f, 0x35, 0xa8, 0x8b, 0xf1, 0x0b, 0xd1, 0x30, 0x29, 0x26, 0x12,
	0x26, 0xb8, 0x07, 0x30, 0x61, 0x01, 0x77, 0xbf, 0xf0, 0x30, 0x2b, 0x4a, 0x7d, 0xbc, 0x72, 0x73,
	0xfa, 0xc7, 0x05, 0x8e, 0x16, 0x28, 0xf8, 0x16, 0xac, 0x80, 0xc5, 0x39, 0x5f, 0xad, 0x6b, 0x67,
	0x35, 0xff, 0x63, 0x0e, 0xa3, 0x8a, 0x80, 0x6e, 0x31, 0xa1, 0x5c, 0x40, 0xad, 0xee, 0x93, 0xd5,
	0x02, 0x6e, 0x85, 0xa4, 0x25, 0x9a, 0xf3, 0x1a, 0xac, 0xb2, 0x3a, 0xe1, 0x13, 0x17, 0x87, 0x7c,
	0xa5, 0x55, 0x20, 0xf7, 0x83, 0xdf, 0x64, 0xc5, 0xea, 0x89, 0xb3, 0x13, 0x81, 0x59, 0x14, 0x75,
	0x0f, 0x6b, 0x1b, 0xcc, 0x59, 0x34, 0x52, 0xc6, 0xea, 0xf2, 0xa7, 0xbf, 0x33, 0xc7, 0x12, 0x80,
	0x5d, 0x58, 0xcf, 0x12, 0x7f, 0x32, 0xe1, 0x09, 0x1f, 0x1f, 0xcc, 0xf3, 0x5f, 0x63, 0x31, 0xe5,
	0xec, 0xc1, 0xfa, 0x42, 0x13, 0xf7, 0xbc, 0xb9, 0xb8, 0x58, 0xaa, 0xda, 0x32, 0x7e, 0xf1, 0x01,
	0xea, 0xe2, 0xb7, 0xc0, 0x16, 0xc0, 0xf9, 0x60, 0x7f, 0x38, 0x3c, 0x39, 0x1e, 0xb8, 0x47, 0xed,
	0x35, 0xdc, 0x00, 0xcb, 0x73, 0x89, 0x4e, 0xe9, 0x64, 0xe8, 0xb5, 0x35, 0xdc, 0x84, 0xff, 0x0f,
	0x4f, 0xcf, 0x07, 0x9e, 0x4b, 0x9f, 0xab, 0xb4, 0x2e, 0x50, 0xc3, 0x33, 0xf7, 0xd0, 0xdb, 0xf7,
	0x4e, 0xa9, 0x5d, 0x3b, 0x68, 0xff, 0xba, 0xed, 0x68, 0xbf, 0x6f, 0x3b, 0xda, 0x9f, 0xdb, 0x8e,
	0xf6, 0xed, 0x6f, 0x67, 0xed, 0xa2, 0x21, 0x7b, 0xdb, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x89,
	0x3d, 0x66, 0x6c, 0x32, 0x05, 0x00, 0x00,
}
